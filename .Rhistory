DTOutput("monitor_15_tbl") ) ),
tags$br(),
tags$h4("Missing Values"),
tags$h6("The first 7 columns should always have 0% missing values.
If there's missing values in one of these, inspect the data."),
plotOutput("monitor_15_missing"),
tags$h4("Distribution of Values"),
tags$h6("Only the continuous variables are plotted. This shows you the range
of values for each column. If any values seem unusual for a column,
inspect the data further."),
plotOutput("monitor_15_histogram")
)
)
)
),
# CONTENT tab 4
material_side_nav_tab_content(
side_nav_tab_id = "analysis_nav_tab",
material_tabs(
color = "orange",
tabs = c(
"Instructions" = "instructions",
"Format Data" = "format") ),
material_tab_content(
tab_id = "instructions",
## UI html content here
material_card( depth = 0,
tags$div(
analysis_tab_content()
)
)
),
material_tab_content(
tab_id = "format",
## UI html content here
material_card( depth = 0,
tags$div(
tags$h4("Format Data from Word Press"),
tags$p("Upload the csv file that you downloaded from the admin site, then
click the 'Format User Data' button.")
),
material_file_input("uploadUserData", "Upload User Data"),
actionButton("clean_export", "Format User Data"),
uiOutput("analysis_output_UI")
)
)
)
)
server <- function(input, output, session) {
output$jpactPath <- renderUI({
# Check file name
if ( !is.null(input$import_jpact$datapath) ) {
if( grepl("JPACT", basename(input$import_jpact$name) ) ) {
tagList(
HTML(
paste(
"Upload of JPACT file was ",
tags$span( style="color:green",
"successful!"
), sep = ""
)
)
)
} else {
shinyjs::alert("You tried uploading the wrong file. Please upload the JPACT text file.")
}
} else {
tagList(
HTML(
paste(
"Waiting for ",
tags$span(
style="color:red",
"JPACT file"
), sep = ""
)
)
)
}
})
# onclick("openData", alert("Remember, don't open the csv files before uploading to the admin site!"))
output$pprtPath <- renderUI({
# Check file name
if ( !is.null(  input$import_pprt$datapath ) ) {
if( grepl(  "PAY_POLICY_RATE", basename( input$import_pprt$name ) ) ) {
tagList(
HTML(
paste(
"Upload of PPRT file was ",
tags$span(
style="color:green",
"successful!"
), sep = ""
)
)
)
} else {
shinyjs::alert("You tried uploading the wrong file. Please upload the PAY POLICY RATE (PPRT) text file.")
}
} else {
tagList(
HTML(
paste(
"Waiting for ",
tags$span(
style="color:red",
"PPRT file"
), sep = ""
)
)
)
}
})
output$titlePath <- renderUI({
# Check file name
if ( !is.null( input$import_title$datapath ) ) {
if( grepl( "TITLE_Reference_Extract", basename(input$import_title$name) ) ) {
tagList(
HTML(
paste(
"Upload of Title Reference file was ",
tags$span(
style="color:green",
"successful!"
), sep = ""
)
)
)
} else {
shinyjs::alert("You tried uploading the wrong file. Please upload the TITLE Reference text file.")
}
} else {
tagList(
HTML( paste("Waiting for ", tags$span(style="color:red", "Title Reference file"), sep = "") )
)
}
})
# Read the Word Press Admin Export Data
user_data_file <- reactive({
validate( need( input$uploadUserData, message = FALSE))
input$uploadUserData
})
# Enable the button to clean export data
observe({
if ( !is.null( input$uploadUserData ) ) {
enable("clean_export")
} else {
disable("clean_export")
}
})
# All data can be used for to find how many paths started and printed, etc.
all_user_data <- reactive({
events <- read_csv( user_data_file()$datapath ) %>%
filter( !Time < mdy("05012019") )
})
# This events data is cleaned up and only concerned with 'Printed' paths
events <- eventReactive(input$clean_export, {
events <- all_user_data() %>%
dplyr::mutate(Path = lag(`Full Event Url`)) %>%
dplyr::mutate(PathDirection = ifelse( as.character(`Job Id`) == str_sub(Path, start = -4), "Forward", "Reverse")) %>%
dplyr::filter(`Event Type` == "print") %>%
dplyr::filter(Path != "http://pathfinder.devcp.lacounty.gov/wp-json/careerpathfinder/v1/event?type=print") %>%
dplyr::select(Time, `User Session Id`, PathDirection, Path)
events <- events %>%
dplyr::mutate(Path_Stripped = str_replace(events$Path,
"http\\:\\/\\/pathfinder\\.devcp\\.lacounty\\.gov\\/wp\\-json\\/careerpathfinder\\/v1\\/event\\?type\\=step\\?steps\\=", ""))
events <- events %>%
dplyr::mutate(Path_Stripped = str_replace(events$Path_Stripped,
"http\\:\\/\\/pathfinder\\.devcp\\.lacounty\\.gov\\/wp\\-json\\/careerpathfinder\\/v1\\/event\\?type\\=start\\?steps\\=", "")) %>%
dplyr::select(Time, `User Session Id`, PathDirection, Path_Stripped)
paths_df <- as.data.frame( str_split(events$Path_Stripped, '\";\"', simplify = TRUE) )
paths_df <- as.data.frame( mapply(str_pad, paths_df, MoreArgs = list(width = 4, side = "left", pad = "0")) )
paths_df <- as.data.frame( mapply(gsub, paths_df, MoreArgs = list(pattern = "0000", replacement = NA)) )
paths_df$NumSteps <- as.data.frame( t( !apply(paths_df, 1, is.na) ) ) %>% rowSums(na.rm = TRUE, dims = 1)
names(paths_df) <- c(paste("Title", 1:5), "NumSteps")
paths_df$`Title 1` <- str_extract(paths_df$`Title 1`,
pattern = "=[0-9]{1,6}") %>%
str_extract(pattern = "[0-9]{1,6}") %>%
str_pad(width = 4, side = "left", pad = "0")
events <- cbind(events, paths_df)
events <- events %>% dplyr::select(-Path_Stripped)
events
})
output$analysis_output_UI <- renderUI({
printed_avgSteps <- round( mean( events()$NumSteps, na.rm = TRUE), 2 )
printed_totalPaths <- nrow( events() )
printed_direction <- events() %>%
dplyr::filter(NumSteps > 1) %>%
dplyr::group_by(PathDirection) %>%
dplyr::summarise(Count = n() ) %>%
dplyr::ungroup() %>%
dplyr::mutate(Percent = round( Count/sum(Count)*100, 2) )
starts <- all_user_data() %>%
dplyr::mutate( Path = lag(`Full Event Url`)) %>%
# ADD HERE #  extract last 4 chars from event URL and compare to the JOB ID column on the next line. If same, it is a reverse path? Otherwise departure
dplyr::mutate( PathDirection = ifelse( as.character(`Job Id`) == str_sub(Path, start = -4), "Forward", "Reverse")) %>%
dplyr::filter( `Event Type` == "start")
help <- nrow( all_user_data() %>% dplyr::filter(`Event Type` == "help") )
tagList(
material_row(
material_column( width = 4,
DT::datatable( events(),
options = list(dom = 'ftp') )
),
material_column( width = 8 )
),
material_row(
downloadButton("downloadCleanedExport")
),
br(),
material_row(
material_column( width = 4,
DT::datatable( rbind(printed_avgSteps,
format(printed_totalPaths, big.mark = ","),
format(nrow(starts), big.mark = ",")),
options = list( dom = 't'),
width = "300px",
colnames = c("", ""),
rownames = c("Printed Paths Avg. Steps", "Total Paths Printed", "Total Paths Started"),
caption = "Statistics for Printed Career Paths")
),
material_column( width = 4, offset = 1,
material_card( renderText( c(format(help, big.mark = ","),
"visitors have used the 'Take-a-Tour' button")
) )
)
)
)
})
output$downloadCleanedExport <- downloadHandler(
filename = function() {
paste('events', Sys.Date(), format( Sys.time(), "%I%M %p"), '.csv', sep = ' ')
},
content = function(con) {
readr::write_csv(events(), con)
}
)
# Read the JPACT file and show the user it has been read correctly
jpact_file <- reactive({
validate(need(input$import_jpact, message = FALSE))
input$import_jpact
})
jpact_data <- reactive({
job_specs = readr::read_csv("./input/jpact_extract_specs.csv")
job_specs = job_specs[ complete.cases(job_specs), ]
adv <- data.table::setDT(readr::read_fwf( jpact_file()$datapath , skip = 1,
progress = FALSE,
col_types = paste(rep("c", length(job_specs$FieldName)), collapse = ""), # new
fwf_positions(job_specs$Start,
job_specs$End,
col_names = job_specs$FieldName)))
as.data.frame(adv)
})
jpact_file_date <- reactive({
data.table::setDT(readr::read_fwf( jpact_file()$datapath , n_max = 1,
progress = FALSE,
fwf_positions(job_specs$Start,
job_specs$End,
col_names = job_specs$FieldName))) %>%
dplyr::select(1) %>%
mdy()
})
title_file <- reactive({
validate(need(input$import_title, message = FALSE))
input$import_title
})
title_data <- reactive({
title_specs = readr::read_csv("./input/title_reference_specs.csv")
title_specs = title_specs[ complete.cases(title_specs), ]
title <- data.table::setDT( readr::read_fwf( title_file()$datapath,
progress = FALSE,
col_types = paste(rep("c", length(title_specs$FieldName)), collapse = ""), # new
fwf_positions(title_specs$Start,
title_specs$End,
col_names = title_specs$FieldName)) %>%
filter(ExpirationDate == "12319999")
)
as.data.frame(title)
})
pprt_file <- reactive({
validate(need(input$import_pprt, message = FALSE))
input$import_pprt
})
pprt_data <- reactive({
pprt_specs = readr::read_csv("./input/pprt_reference_specs.csv")
pprt_specs = pprt_specs[ complete.cases(pprt_specs), ]
salary <- data.table::setDT(readr::read_fwf( pprt_file()$datapath,
progress = FALSE,
col_types = "cccd", # new
fwf_positions(pprt_specs$Start,
pprt_specs$End,
col_names = pprt_specs$FieldName)))
as.data.frame(salary)
})
# Enable the button to clean data
observe({
if ( !is.null( input$import_jpact ) & !is.null( input$import_title ) & !is.null( input$import_pprt )  ) {
enable("clean_data")
} else {
disable("clean_data")
}
})
observe({
onclick("clean_data", hide("clean_data"))
})
# Hide/Show download button
# observeEvent(input$clean_data, {
# shinyjs::show("download_CP_data")
# withBusyIndicatorServer("clean_data", {
#   Sys.sleep(1)
# })
# })
# Run DataCleaningScript.R
# observeEvent(input$clean_data, {
#   source("./functions/DataCleaningScript.R")
#   dataCleaning( jpact_data(), pprt_data(), title_data() )
# })
datasetsOutput <- eventReactive(input$clean_data, {
dat <- dataCleaning( jpact_data(), pprt_data(), title_data() )
return( dat )
})
observeEvent(input$clean_data, {
# New Hires/Promos counts are for Career PathFinder stats page updates
start <- jpact_file_date() %m-% months(6)
rptMonth <- lubridate::interval( start, jpact_file_date() )
nh_by_class <- jpact_data() %>%
dplyr::filter( is.na(APPOINTMENT_ID) ) %>%
dplyr::filter(SUB_TITLE_CD %in% c("A", "D", "N", "L") &
!HOME_DEPT_CD %in% c("GJ", "NL", "SC") &
PERS_ACTN_CD %in% c("01", "44", "44A", "44B") &
mdy(EFFECTIVE_DT) %within% rptMonth ) %>%
dplyr::distinct(EMPLOYEE_ID, PERS_ACTN_CD, TITLE_CD, .keep_all = TRUE)
withBusyIndicatorServer("clean_data", {
# material_spinner_show(session, "test")
insertUI(selector = "#clean_data", where = "afterEnd",
ui = tagList(
tags$br(),
downloadButton("download_CP_data"),
tags$p("Your datasets, such as ",
toupper( names( datasetsOutput() )[1] ),
"are ready for download."),
tags$br(),
tags$p("There were ", format( nrow(nh_by_class), big.mark = ",") ,
"new hires and promotions in the last 6 months.")
)
)
# material_spinner_hide(session, "test")
})
})
observeEvent(input$clean_data, {
# When the button is clicked, wrap the code in a call to `withBusyIndicatorServer()`
withBusyIndicatorServer("clean_data", {
Sys.sleep(3)
})
})
# datasetInput <- reactive({
#   return(list(rock=rock, pressure=pressure, cars=cars))
# })
output$download_CP_data <- downloadHandler(
filename = 'item_pairs.zip',
content = function(fname) {
tmpdir <- tempdir()
setwd(tempdir())
print(tempdir())
fs <- c("item_pairs_15.csv", "item_pairs_15_rev.csv",
"item_pairs_30.csv", "item_pairs_30_rev.csv")
readr::write_csv(datasetsOutput()$item_pairs_15, path = "item_pairs_15.csv", na = "")
readr::write_csv(datasetsOutput()$item_pairs_15_rev, path = "item_pairs_15_rev.csv", na = "")
readr::write_csv(datasetsOutput()$item_pairs_30, path = "item_pairs_30.csv", na = "")
readr::write_csv(datasetsOutput()$item_pairs_30_rev, path = "item_pairs_30_rev.csv", na = "")
print (fs)
zip(zipfile=fname, files=fs)
if( file.exists( paste0( fname, ".zip" ) ) ) {
file.rename( paste0( fname, ".zip" ), fname )
}
},
contentType = "application/zip"
)
onclick("download_CP_data",
shinyjs::alert("Your files are downloading to your 'Downloads' folder")
)
onclick("downloadCleanedExport",
shinyjs::alert("Your file is downloading to your 'Downloads' folder"))
# Monitor the Data --------------------------------------------
# 30 Year Data Checks
output$monitor_30_tbl <- DT::renderDataTable({
tbl <- cbind(names(introduce(datasetsOutput()$item_pairs_30)),
transpose( introduce(datasetsOutput()$item_pairs_30) ) )
tbl <- tbl[c(1,2,5,6,7),]  # keep relevant rows
tbl[,1] <- c("Rows", "Columns", "Empty Columns",
"Total Missing Values (Cells)", "Complete Rows")
DT::datatable(
tbl,
width = "500px",
options = list( dom = 't'),
colnames = c("", "")
)
})
output$monitor_30_missing <- renderPlot({
plot_missing(datasetsOutput()$item_pairs_30,
ggtheme = theme_minimal(),
theme_config = list("legend.position" = "none"))
})
output$monitor_30_histogram <- renderPlot({
plot_histogram( datasetsOutput()$item_pairs_30[, c("Incumbents", "ItemCt", "PairCt", "Prob", "Salary1", "Salary1Min", "Salary2", "Salary2Min", "SalaryDiff")],
ggtheme = theme_minimal())
})
# 15 Year Data Checks
output$monitor_15_tbl <- DT::renderDataTable({
tbl <- cbind(names(introduce(datasetsOutput()$item_pairs_15)),
transpose( introduce(datasetsOutput()$item_pairs_15) ) )
tbl <- tbl[c(1,2,5,6,7),]  # keep relevant rows
tbl[,1] <- c("Rows", "Columns", "Empty Columns",
"Total Missing Values (Cells)", "Complete Rows")
DT::datatable(
tbl,
width = "500px",
options = list( dom = 't'),
colnames = c("", "")
)
})
output$monitor_15_missing <- renderPlot({
plot_missing(datasetsOutput()$item_pairs_15,
ggtheme = theme_minimal(),
theme_config = list("legend.position" = "none"))
})
output$monitor_15_histogram <- renderPlot({
plot_histogram( datasetsOutput()$item_pairs_15[, c("Incumbents", "ItemCt", "PairCt", "Prob", "Salary1", "Salary1Min", "Salary2", "Salary2Min", "SalaryDiff")],
ggtheme = theme_minimal())
})
if (!interactive()) {
session$onSessionEnded(function() {
stopApp()
q("no")
})
}
}
shinyApp(ui, server, ...)
}
devtools::load_all()
myApp()
devtools::load_all()
myApp()
pkgload::load_all(".")
usethis::use_package("shiny")
usethis::use_package("pkgload")
usethis::use_package("shinymaterial")
usethis::use_package("shinyjs")
usethis::use_package("dplyr")
usethis::use_package("lubridate")
usethis::use_package("data.table")
usethis::use_package("stringr")
usethis::use_package("readr")
usethis::use_package("DT")
usethis::use_build_ignore("app.R")
pkgload::load_all(".")
library(devtools)
#> Loading required package: usethis
use_mit_license()
check()
document()
jpact_extract_specs=read_csv("input/jpact_extract_specs.csv")
use_data(jpact_extract_specs)
pprt_reference_specs=read_csv("input/pprt_reference_specs.csv")
use_data(pprt_reference_specs)
title_reference_specs=read_csv("input/title_reference_specs.csv")
use_data(title_reference_specs)
load("input/taps.RDS")
load("input/taps.RDS")
use_data(df)
load_all()
load_all()
rlang::last_trace()
load_all()
rlang::last_trace()
load_all()
myApp()
usethis::use_directory("inst")
myApp()
load_all()
rlang::last_trace()
system.file("inst", "wp-admin-export.png", package = "careerpathfinder")
system.file("inst", "wp-admin-export.png", package = "careerpathfinder")
load_all()
system.file("inst", "wp-admin-export.png", package = "careerpathfinder")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
fs::path_package("inst", package = "careerpathfinder")
fs::path_package("inst", "wp-admin-export.png" package = "careerpathfinder")
fs::path_package("inst", "wp-admin-export.png", package = "careerpathfinder")
load_all()
myApp()
myApp()
load_all()
myApp()
library(devtools)
dplyr::n()
load_all()
myApp()
myApp()
myApp()
myApp
myApp()
load_all()
myApp()
load_all()
myApp()
load_all()
myApp()
runApp('R')
load_all()
myApp()
